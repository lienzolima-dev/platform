---
import { serviceOptions } from "../../db/schemas/complaints";
import { complaintOptions } from "../../db/schemas/complaints";
import { actions, isInputError } from "astro:actions";

const complaintOptionsMap: Record<
  Exclude<(typeof complaintOptions)[number], "complaints">,
  string
> = {
  claim: "Reclamo",
  complaint: "Queja",
};

const result = Astro.getActionResult(actions.db.complaints.addComplaint);
console.log("Resultado de la acción:", result);

let errorMessage = "";

// Check if the result is an error
if (result?.error && !isInputError(result?.error)) {
  errorMessage = result.error.message;
}

// Check if the result is an input error
if (isInputError(result?.error)) {
  for (const issue of result.error.issues) {
    errorMessage += `${issue.message} `;
  }
}
---

<section class="container">
  <h2 class="title">Libro de Reclamos</h2>
  <form action={actions.db.complaints.addComplaint} method="POST">
    <div class="form-grid">
      <div class="form-group">
        <label for="fecha">Fecha de reclamo o queja</label>
        <input type="date" id="date" name="date" required />
      </div>
      <div class="form-group">
        <label for="fullName">Nombres y Apellidos</label>
        <input type="text" id="fullName" name="fullName" required />
      </div>
      <div class="form-group">
        <label for="dni">DNI</label>
        <input type="text" id="dni" name="dni" required />
      </div>
      <div class="form-group">
        <label for="email">Correo Electrónico</label>
        <input type="email" id="email" name="email" required />
      </div>
      <div class="form-group">
        <label for="phone">Teléfono</label>
        <input type="tel" id="phone" name="phone" required />
      </div>
    </div>
    <div class="form-group">
      <label>Identificación del servicio adquirido</label>
      <div class="radio-group">
        <select id="service" name="service">
          <option value="" selected>--- Selecciona un servicio ---</option>
          {
            serviceOptions.map((option) => (
              <option value={option}>{option}</option>
            ))
          }
        </select>
      </div>
    </div>
    <div class="form-group">
      <label for="serviceDescription">Descripción</label>
      <textarea
        id="serviceDescription"
        name="serviceDescription"
        rows="4"
        required></textarea>
    </div>
    <div class="form-group">
      <label>Detalle de reclamación</label>
      <div class="radio-group">
        {
          complaintOptions.map((option) => (
            <label for={option}>
              <input type="radio" name="complaintOption" value={option} />
              {complaintOptionsMap[option]}
            </label>
          ))
        }
      </div>
    </div>
    <div class="form-group">
      <label for="complaintDescription">Detalle</label>
      <textarea
        id="complaintDescription"
        name="complaintDescription"
        rows="4"
        required></textarea>
    </div>
    <div class="form-group">
      <label for="adicionalInfo">Información Adicional</label>
      <textarea id="adicionalInfo" name="adicionalInfo" rows="4"></textarea>
    </div>
    <button type="submit" id="complaint-submit-btn" class="btn">Enviar</button>
  </form>
  {errorMessage && <p class="error">{errorMessage}</p>}
</section>

<script>
  const form = document.querySelector("form");

  if (!(form instanceof HTMLFormElement)) throw new Error("Form not found");
  form.addEventListener("submit", function (event) {
    event.preventDefault(); // Para evitar el envío inmediato
    console.log("Formulario enviado");
    form.submit(); // Ahora enviamos el formulario de manera manual
  });
</script>

<!--
<script>
  import { actions, isInputError } from "astro:actions";

  try {
    const form = document.getElementById("complaint-form");
    const errorContent = document.getElementById("c-error-content");
    const submitButton = document.getElementById("complaint-submit-btn");

    if (!(form instanceof HTMLFormElement)) throw new Error("Form not found");
    if (!(submitButton instanceof HTMLButtonElement))
      throw new Error("Submit button not found");

    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      const formData = new FormData(form);

      submitButton.disabled = true;
      const { error } = await actions.db.complaints.addComplaint(formData);
      submitButton.disabled = false;

      if (!error) {
        location.reload();
        return;
      }

      if (error && errorContent instanceof HTMLElement) {
        errorContent.innerHTML = "";

        if (isInputError(error)) {
          const ul = document.createElement("ul");

          error.issues.forEach((err) => {
            const li = document.createElement("li");
            li.innerText = err.message;
            ul.appendChild(li);
          });

          errorContent.appendChild(ul);
          return;
        }
        errorContent.innerText = error.message;
      }
    });
  } catch (error) {
    console.error(error);
  }
</script>-->

<style>
  .container {
    margin: 0 auto;
    padding: 20px;
    width: 100%;
    text-align: center;
    justify-content: center;
    align-items: center;
  }

  .title {
    text-align: center;
    margin-bottom: 20px;
    color: var(--font-color-400);
  }

  form {
    max-width: 100%;
  }

  .form-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    margin-bottom: 20px;
  }

  .form-group {
    display: flex;
    flex-direction: column;
  }

  .form-group:last-child {
    margin-right: 0;
  }

  .half-width {
    flex-basis: 48%;
  }

  label {
    display: block;
    font-weight: bold;
    margin-bottom: 5px;
    text-align: left;
  }

  input[type="text"],
  input[type="email"],
  input[type="tel"],
  input[type="date"],
  textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
  }

  textarea {
    resize: none;
  }

  input[type="radio"] {
    margin-right: 10px;
  }

  .radio-group {
    display: flex;
    justify-content: start;
    gap: 20px;
    margin-top: 10px;
    grid-column: span 2;
  }

  .radio-group label {
    display: flex;
    align-items: center;
    font-weight: normal;
    gap: 5px;
  }

  .btn {
    display: block;
    width: 200px;
    padding: 10px;
    background-color: var(--primary-400);
    color: white;
    font-size: 16px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    margin: 20px auto 0 auto;
    transition: ease 0.3s;
  }

  .btn:hover {
    background-color: var(--primary-500);
  }

  @media (max-width: 768px) {
    .form-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
