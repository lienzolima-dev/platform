---
import { serviceOptions } from "../../../db/schemas/complaints";
// biome-ignore lint/style/useImportType: Bug
import { complaintOptions } from "../../../db/schemas/complaints";
import { actions, isInputError } from "astro:actions";

const complaintOptionsMap: Record<
  Exclude<(typeof complaintOptions)[number], "complaints">,
  string
> = {
  claim: "Reclamo",
  complaint: "Queja",
};

const result = Astro.getActionResult(actions.db.complaints.addComplaint);

let errorMessage = "";

// Check if the result is an error
if (result?.error && !isInputError(result?.error)) {
  errorMessage = result.error.message;
}

// Check if the result is an input error
if (isInputError(result?.error)) {
  const firstIssue = result.error.issues[0];
  if (firstIssue) {
    errorMessage = firstIssue.message;
  }
}
---

<section class="container">
  <h2 class="title">Libro de Reclamos</h2>
  <form id="complaint-form">
    <div class="form-grid">
      <div class="form-group">
        <input type="date" id="date" name="date" required />
        <label for="date">Fecha de reclamo o queja</label>
      </div>
      <div class="form-group">
        <input type="text" id="fullName" name="fullName" required />
        <label for="fullName">Nombres y Apellidos</label>
      </div>
      <div class="form-group">
        <input type="text" id="dni" name="dni" required />
        <label for="dni">DNI</label>
      </div>
      <div class="form-group">
        <input type="email" id="email" name="email" required />
        <label for="email">Correo Electrónico</label>
      </div>
      <div class="form-group">
        <input type="tel" id="phone" name="phone" required />
        <label for="phone">Teléfono</label>
      </div>
    </div>
    <div class="form-group">
      <select id="service" name="service" required>
        <option value="" selected>Selecciona un servicio</option>
        {
          serviceOptions.map((option) => (
            <option value={option}>{option}</option>
          ))
        }
      </select>
      <label class="s-label">Identificación del servicio adquirido</label>
    </div>
    <div class="form-group">
      <textarea
        id="serviceDescription"
        name="serviceDescription"
        rows="4"
        required></textarea>
      <label for="serviceDescription">Descripción</label>
    </div>
    <div class="rg-group">
      <label class="rg-label">Detalle de reclamación</label>
      <div class="radio-group">
        {
          complaintOptions.map((option) => (
            <label for={option}>
              <input
                type="radio"
                name="complaintOption"
                value={option}
                required
              />
              {complaintOptionsMap[option]}
            </label>
          ))
        }
      </div>
    </div>
    <div class="form-group">
      <textarea
        id="complaintDescription"
        name="complaintDescription"
        rows="4"
        required></textarea>
      <label for="complaintDescription">Detalle</label>
    </div>
    <div class="form-group">
      <textarea id="adicionalInfo" name="adicionalInfo" rows="4"></textarea>
      <label for="adicionalInfo">Información Adicional</label>
    </div>
    <div id="error-content"></div>
    <button type="submit" id="complaint-submit-btn" class="btn">Enviar</button>
  </form>
</section>

<script>
  import { actions, isInputError } from "astro:actions";
  import { openDialog, type DialogEvent } from "../../global/dialog/utils";

  document.querySelectorAll(".form-group input").forEach((input) => {
    input.addEventListener("input", () => {
      const inputElement = input as HTMLInputElement;
      if (inputElement.value) {
        input.classList.add("has-content");
      } else {
        input.classList.remove("has-content");
      }
    });
  });

  document.querySelectorAll(".form-group textarea").forEach((textarea) => {
    textarea.addEventListener("input", () => {
      const textareaElement = textarea as HTMLInputElement;
      if (textareaElement.value) {
        textarea.classList.add("has-content");
      } else {
        textarea.classList.remove("has-content");
      }
    });
  });

  try {
    const form = document.getElementById("complaint-form");
    const errorContent = document.getElementById("error-content");
    const submitButton = document.getElementById("complaint-submit-btn");

    if (!(form instanceof HTMLFormElement)) throw new Error("Form not found");
    if (!(submitButton instanceof HTMLButtonElement))
      throw new Error("Submit button not found");
    if (!(errorContent instanceof HTMLElement))
      throw new Error("Error content not found");

    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      const formData = new FormData(form);

      submitButton.disabled = true;
      const { error } = await actions.db.complaints.addComplaint(formData);
      submitButton.disabled = false;

      errorContent.innerHTML = "";

      if (error) {
        if (isInputError(error)) {
          const ul = document.createElement("ul");
          const li = document.createElement("li");
          li.innerText = error.issues[0].message;
          ul.appendChild(li);
          errorContent.appendChild(ul);
          return;
        }
        errorContent.innerText = error.message;
        return;
      }
      openDialog("successful-complaint-popup");
    });

    document.addEventListener("dialog-close", (event) => {
      if ((event as DialogEvent).detail.id === "successful-complaint-popup") {
        location.reload();
      }
    });
  } catch (error) {
    console.error("[ERROR]: ", error);
  }
</script>

<style>
  .container {
    margin: 0 auto;
    padding: 20px;
    width: 100%;
    text-align: center;
    justify-content: center;
    align-items: center;
  }

  .title {
    text-align: center;
    margin-bottom: 20px;
    color: var(--font-color-400);
  }

  form {
    max-width: 100%;
  }

  .form-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
  }

  .form-group {
    display: flex;
    position: relative;
    flex-direction: column;
    margin: 0.5rem 0;
  }

  .form-group:last-child {
    margin-right: 0;
  }

  .form-group input ~ label,
  .form-group .s-label {
    position: absolute;
    top: 50%;
    left: 5px;
    transform: translateY(-50%);
    font-size: 1rem;
    padding: 0 10px;
    pointer-events: none;
    transition: 0.3s;
    background: var(--background);
  }

  .form-group textarea ~ label {
    position: absolute;
    top: 20%;
    left: 5px;
    transform: translateY(-50%);
    font-size: 1rem;
    padding: 0 10px;
    pointer-events: none;
    transition: 0.3s;
    background: var(--background);
  }

  .rg-label {
    display: block;
    margin-bottom: 5px;
    text-align: left;
  }

  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 10px 15px;
    font-size: 1rem;
    border: 1px solid var(--tertiary-400);
    border-radius: 10px;
    background: transparent;
    outline: none;
  }

  textarea {
    resize: none;
  }

  .form-group input:focus ~ label,
  .form-group input:valid ~ label,
  .form-group input.has-content ~ label,
  .form-group textarea:focus ~ label,
  .form-group textarea.has-content ~ label,
  .form-group select:focus ~ label,
  .form-group select:valid ~ label {
    top: 0;
    font-size: 0.8rem;
    background: var(--background);
  }

  select {
    width: 49%;
    padding: 10px 15px;
    font-size: 1rem;
    border: 1px solid var(--tertiary-400);
    border-radius: 10px;
    background: transparent;
    outline: none;
  }

  input[type="radio"] {
    margin-right: 10px;
  }

  .radio-group {
    display: flex;
    justify-content: start;
    gap: 20px;
    margin-top: 10px;
    grid-column: span 2;
  }

  .radio-group label {
    display: flex;
    align-items: center;
    font-weight: normal;
    gap: 5px;
  }

  .radio-group input[type="radio"] {
    appearance: none;
    width: 16px;
    height: 16px;
    border: 2px solid var(--primary-400);
    border-radius: 20%;
    outline: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .radio-group input[type="radio"]:checked {
    background-color: var(--primary-400);
    border-color: var(--primary-500);
  }

  #error-content {
    color: red;
  }

  .btn {
    display: block;
    width: 200px;
    padding: 10px;
    background-color: var(--primary-400);
    color: white;
    font-size: 16px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    margin: 20px auto 0 auto;
    transition: ease 0.3s;
  }

  .btn:hover {
    background-color: var(--secondary-400);
    color: var(--primary-400);
  }

  @media (max-width: 768px) {
    .form-grid {
      grid-template-columns: 1fr;
    }

    select {
      width: 100%;
    }
  }

  @media (max-width: 430px) {
    .form-group input ~ label,
    .form-group .s-label,
    .form-group textarea ~ label {
      top: 0;
      font-size: 0.8rem;
    }

    .form-group .s-label {
      font-size: 0.7rem;
    }
  }
</style>
