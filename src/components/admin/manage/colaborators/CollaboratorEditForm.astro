---
import type { userRoles } from "../../../../db/schemas/users";
import Toggle from "../../../../components/global/form/Toggle.astro";

const userRolesMap: Record<(typeof userRoles)[number], string> = {
  admin: "Administrador",
  manicurist: "Manicurista",
  user: "Usuario",
};
---

<section>
  <div class="form-container">
    <h2>Editar Usuario</h2>
    <form id="edit-collaborator-form">
      <input type="hidden" id="collaborator-id" name="userId" />

      <label for="username">
        Nombre: <span class="required">*</span>
      </label>
      <input
        type="text"
        id="username"
        name="username"
        placeholder="Ingresa nombre completo"
        required
      />

      <label for="collaborator-email"
        >Email <span class="required">*</span>
      </label>
      <input
        type="email"
        id="collaborator-email"
        name="email"
        placeholder="Ingresa un email"
        required
      />

      <label for="collaborator-phone">Teléfono</label>
      <input
        type="text"
        id="collaborator-phone"
        name="phone"
        placeholder="Ingresa un teléfono"
      />

      <label for="collaborator-role">
        Rol <span class="required">*</span>
      </label>

      <select id="collaborator-role" name="userRole">
        {
          Object.entries(userRolesMap).map(([role, label]) => (
            <option value={role}>{label}</option>
          ))
        }
      </select>

      <div class="toggle">
        <Toggle id="c-toggle-password" name="changePassword">
          Cambiar contraseña
        </Toggle>
      </div>

      <div id="c-password-fields" class="hidden">
        <label for="c-password">
          Contraseña<span class="required">*</span>
        </label>
        <input
          type="password"
          id="c-password"
          name="password"
          placeholder="Ingresa nueva contraseña"
        />

        <label for="c-confirm-password">
          Confirmar Contraseña <span class="required">*</span>
        </label>
        <input
          type="password"
          id="c-confirm-password"
          name="confirmPassword"
          placeholder="Confirma la nueva contraseña"
        />
      </div>

      <button id="c-edit-submit-btn" type="submit">Guardar</button>
    </form>
    <div id="c-edit-error-content"></div>
  </div>
</section>

<script>
  import { actions, isInputError } from "astro:actions";

  try {
    const form = document.getElementById("edit-collaborator-form");
    const errorContent = document.getElementById("c-edit-error-content");
    const togglePassword = document.getElementById("c-toggle-password");
    const passwordFields = document.getElementById("c-password-fields");
    const passwordInput = document.getElementById("c-password");
    const confirmPasswordInput = document.getElementById("c-confirm-password");
    const submitButton = document.getElementById("c-edit-submit-btn");

    if (!(passwordInput instanceof HTMLInputElement)) {
      throw new Error("Password input not found");
    }

    if (!(confirmPasswordInput instanceof HTMLInputElement)) {
      throw new Error("Confirm password input not found");
    }

    if (!(form instanceof HTMLFormElement)) throw new Error("Form not found");

    if (!(submitButton instanceof HTMLButtonElement)) {
      throw new Error("Submit button not found");
    }

    if (togglePassword instanceof HTMLInputElement && passwordFields) {
      togglePassword.addEventListener("change", () => {
        passwordFields.classList.toggle("hidden");

        if (togglePassword.checked) {
          passwordInput.required = true;
          confirmPasswordInput.required = true;
        } else {
          passwordInput.required = false;
          passwordInput.value = "";
          confirmPasswordInput.required = false;
          confirmPasswordInput.value = "";
        }
      });
    }

    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      const formData = new FormData(form);

      submitButton.disabled = true;
      const { error } = await actions.db.users.editCollaborator(formData);
      submitButton.disabled = false;
      if (!error) location.reload();

      if (error && errorContent instanceof HTMLElement) {
        errorContent.innerHTML = "";

        if (isInputError(error)) {
          const ul = document.createElement("ul");

          error.issues.forEach((err) => {
            const li = document.createElement("li");
            li.innerText = err.message;
            ul.appendChild(li);
          });

          errorContent.appendChild(ul);
          return;
        }
        errorContent.innerText = error.message;
      }
    });
  } catch (e) {
    console.error("Error:", e);
  }
</script>

<style>
  h2 {
    font-size: 1.4rem;
    margin-bottom: 1rem;
    font-weight: bold;
  }

  input,
  select {
    border: 1px solid #ccc;
    outline: none;
    padding: 0.5rem;
    margin-bottom: 0.5rem;
  }

  .form-container {
    width: 100%;
    display: flex;
    flex-direction: column;
  }

  .form-container h3 {
    margin-bottom: 2rem;
  }

  .list:checked ~ .form-container {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  form {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    border-radius: 0.5rem;
    width: 100%;
    max-width: 100%;
    margin-bottom: 0.5rem;
  }

  #c-edit-error-content {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    color: #b11313;
  }

  .required {
    color: #b11313;
  }

  .optional {
    font-style: italic;
  }

  button {
    background-color: #47a04c;
    color: white;
    font-weight: 700;
    font-size: 1rem;
    border-radius: 0.25rem;
    padding: 0.5rem 1rem;
  }

  button:disabled {
    background-color: #ccc;
  }

  .hidden {
    display: none;
  }

  #c-password-fields:not(.hidden) {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .toggle {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
  }
</style>
